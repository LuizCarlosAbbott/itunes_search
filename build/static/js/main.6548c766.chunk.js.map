{"version":3,"sources":["components/assets/itunes.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","musicas","albuns","artist","lista","value","handleChange","bind","handleSubmit","onSortClicked","fetch","this","then","res","json","data","results","map","trackCensoredName","artistName","filter","index","self","indexOf","collectionName","setState","catch","event","target","search","preventDefault","e","id","Form","onSubmit","className","CardImg","src","img","Row","xs","style","width","Col","sm","size","paddingRight","Input","type","placeholder","onChange","color","fontSize","display","href","onClick","background","artista","musica","musicaSplit","split","pop","push","album","albumSplit","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,oC,0QCiL5BC,E,kDAnKb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IATRC,MAAQ,CACNC,QAAS,GACTC,OAAQ,GACRC,OAAQ,GACRC,OAAO,EACPC,MAAO,IAMP,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBALJ,E,qDAQT,IAAD,OACPG,MACE,wCAA0CC,KAAKX,MAAMK,MAAQ,aAE5DO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAId,EAAUc,EAAKC,QAChBC,KAAI,SAAAF,GAAI,OAAIA,EAAKG,kBAAoB,KAAOH,EAAKI,cACjDC,QAAO,SAACf,EAAOgB,EAAOC,GACrB,OAAOA,EAAKC,QAAQlB,KAAWgB,KAG/BnB,EAASa,EAAKC,QACfC,KAAI,SAAAF,GAAI,OAAIA,EAAKS,eAAiB,KAAOT,EAAKI,cAC9CC,QAAO,SAACf,EAAOgB,EAAOC,GACrB,OAAOA,EAAKC,QAAQlB,KAAWgB,KAG/BlB,EAASY,EAAKC,QACfC,KAAI,SAAAF,GAAI,OAAIA,EAAKI,cACjBC,QAAO,SAACf,EAAOgB,EAAOC,GACrB,OAAOA,EAAKC,QAAQlB,KAAWgB,KAGnC,EAAKI,SAAS,CAAExB,UAASC,SAAQC,cAElCuB,U,mCAGQC,GACXhB,KAAKc,SAAS,CAAEpB,MAAOsB,EAAMC,OAAOvB,U,mCAGzBsB,GACXhB,KAAKkB,SACLF,EAAMG,mB,oCAGMC,GACZA,EAAED,iBACFnB,KAAKc,SAAS,CAAErB,MAAuB,MAAhB2B,EAAEH,OAAOI,KAChCrB,KAAKkB,W,+BAGG,IAAD,OACP,OACE,kBAAC,WAAD,KACE,kBAACI,EAAA,EAAD,CAAMC,SAAUvB,KAAKH,cACnB,yBAAK2B,UAAU,aACb,kBAACC,EAAA,EAAD,CAASC,IAAKC,OAEhB,wBAAIH,UAAU,oBAAd,iBACA,yBAAKA,UAAU,cACb,kBAACI,EAAA,EAAD,CAAKC,GAAG,KAAKC,MAAO,CAAEC,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IAAMJ,MAAO,CAAEK,aAAc,MAC5C,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,yCACZ5C,MAAOM,KAAKX,MAAMK,MAClB6C,SAAUvC,KAAKL,gBAGnB,kBAACqC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,GAAKV,UAAU,iBAC9B,uBACEA,UAAU,eACVM,MAAO,CACLU,MAAO,6BACPC,SAAU,aAKlB,kBAACL,EAAA,EAAD,CAAOC,KAAK,SAASP,MAAO,CAAEY,QAAS,UACvC,wBAAIlB,UAAU,UACZ,4BACE,uBAAGH,GAAI,EAAGsB,KAAK,IAAIC,QAAS5C,KAAKF,eAC/B,uBACE0B,UAAU,aACVM,MAAO,CAAEU,MAAO,gCAHpB,WAQF,4BACE,uBAAGnB,GAAI,EAAGsB,KAAK,IAAIC,QAAS5C,KAAKF,eAC/B,uBACE0B,UAAU,kBACVM,MAAO,CAAEU,MAAO,gCAHpB,cAWR,kBAACZ,EAAA,EAAD,CAAKE,MAAO,CAAEe,WAAY,YAAaL,MAAO,uBAC3CxC,KAAKX,MAAMI,MACRO,KAAKX,MAAMG,OAAOc,KAAI,SAAAwC,GACpB,IAAIxD,EAAU,GAOd,OANA,EAAKD,MAAMC,QAAQgB,KAAI,SAAAyC,GACrB,IAAIC,EAAcD,EAAOE,MAAM,KAC/B,OAAIH,IAAYE,EAAYE,OACnB5D,EAAQ6D,KAAKH,EAAY,OAIlC,yBAAKxB,UAAU,iBACb,4BACE,uBAAGA,UAAU,qBACZsB,GAEFxD,EAAQgB,KAAI,SAAAyC,GACX,OACE,kBAACf,EAAA,EAAD,CAAKR,UAAU,oCACb,yBAAKA,UAAU,QAAQuB,GACvB,qCAOZ/C,KAAKX,MAAMG,OAAOc,KAAI,SAAAwC,GACpB,IAAIvD,EAAS,GAMb,OALA,EAAKF,MAAME,OAAOe,KAAI,SAAA8C,GACpB,IAAIC,EAAaD,EAAMH,MAAM,KAE7B,OADIH,IAAYO,EAAWH,OAAO3D,EAAO4D,KAAKE,EAAW,KAClD,KAGP,yBAAK7B,UAAU,iBACb,4BACE,uBAAGA,UAAU,uBACZsB,GAEFvD,EAAOe,KAAI,SAAA8C,GACV,OACE,kBAACpB,EAAA,EAAD,CAAKR,UAAU,kCACb,yBAAKA,UAAU,QAAQ4B,GACvB,qCAOhB,6BACA,6BACA,mC,GArKQE,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,MAAK,SAAAkE,GACjCA,EAAaC,kB","file":"static/js/main.6548c766.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/itunes.d760e411.png\";","import React, { Component, Fragment } from \"react\";\nimport { Row, Col, Input, Form, CardImg } from \"reactstrap\";\nimport \"./App.css\";\nimport img from \"./components/assets/itunes.png\";\n\nclass App extends Component {\n  state = {\n    musicas: [],\n    albuns: [],\n    artist: [],\n    lista: true,\n    value: \"\"\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onSortClicked = this.onSortClicked.bind(this);\n  }\n\n  search() {\n    fetch(\n      \"https://itunes.apple.com/search?term=\" + this.state.value + \"&limit=25\"\n    )\n      .then(res => res.json())\n      .then(data => {\n        let musicas = data.results\n          .map(data => data.trackCensoredName + \" #\" + data.artistName)\n          .filter((value, index, self) => {\n            return self.indexOf(value) === index;\n          });\n\n        let albuns = data.results\n          .map(data => data.collectionName + \" #\" + data.artistName)\n          .filter((value, index, self) => {\n            return self.indexOf(value) === index;\n          });\n\n        let artist = data.results\n          .map(data => data.artistName)\n          .filter((value, index, self) => {\n            return self.indexOf(value) === index;\n          });\n\n        this.setState({ musicas, albuns, artist });\n      })\n      .catch();\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    this.search();\n    event.preventDefault();\n  }\n\n  onSortClicked(e) {\n    e.preventDefault();\n    this.setState({ lista: e.target.id === \"1\" });\n    this.search();\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Form onSubmit={this.handleSubmit}>\n          <div className=\"cabecalho\">\n            <CardImg src={img} />\n          </div>\n          <h2 className=\"cabecalho-titulo\">iTunes Search</h2>\n          <div className=\"search-bar\">\n            <Row xs=\"12\" style={{ width: \"100%\" }}>\n              <Col sm={{ size: 11 }} style={{ paddingRight: \"0\" }}>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search musics or albuns of your artist\"\n                  value={this.state.value}\n                  onChange={this.handleChange}\n                />\n              </Col>\n              <Col sm={{ size: 1 }} className=\"imagem-itunes\">\n                <i\n                  className=\"search icon \"\n                  style={{\n                    color: \"rgba(185, 185, 185, 0.507)\",\n                    fontSize: \"3.1em\"\n                  }}\n                />\n              </Col>\n            </Row>\n            <Input type=\"submit\" style={{ display: \"none\" }} />\n            <ul className=\"sorter\">\n              <li>\n                <a id={1} href=\"/\" onClick={this.onSortClicked}>\n                  <i\n                    className=\"music icon\"\n                    style={{ color: \"rgba(185, 185, 185, 0.507)\" }}\n                  />\n                  musics\n                </a>\n              </li>\n              <li>\n                <a id={2} href=\"/\" onClick={this.onSortClicked}>\n                  <i\n                    className=\"file audio icon\"\n                    style={{ color: \"rgba(185, 185, 185, 0.507)\" }}\n                  />\n                  albuns\n                </a>\n              </li>\n            </ul>\n          </div>\n        </Form>\n        <Row style={{ background: \"#3f3e3ee8\", color: \"rgb(218, 216, 216)\" }}>\n          {this.state.lista\n            ? this.state.artist.map(artista => {\n                let musicas = [];\n                this.state.musicas.map(musica => {\n                  let musicaSplit = musica.split(\"#\");\n                  if (artista === musicaSplit.pop())\n                    return musicas.push(musicaSplit[0]);\n                  return true;\n                });\n                return (\n                  <div className=\"search-result\">\n                    <h3>\n                      <i className=\"user circle icon\" />\n                      {artista}\n                    </h3>\n                    {musicas.map(musica => {\n                      return (\n                        <Col className=\"d-flex justify-content-betweenar\">\n                          <div className=\"ml-3\">{musica}</div>\n                          <br />\n                        </Col>\n                      );\n                    })}\n                  </div>\n                );\n              })\n            : this.state.artist.map(artista => {\n                let albuns = [];\n                this.state.albuns.map(album => {\n                  let albumSplit = album.split(\"#\");\n                  if (artista === albumSplit.pop()) albuns.push(albumSplit[0]);\n                  return true;\n                });\n                return (\n                  <div className=\"search-result\">\n                    <h3>\n                      <i className=\"clone outline icon\" />\n                      {artista}\n                    </h3>\n                    {albuns.map(album => {\n                      return (\n                        <Col className=\"d-flex justify-content-between\">\n                          <div className=\"ml-3\">{album}</div>\n                          <br />\n                        </Col>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n          <br />\n          <br />\n          <br />\n        </Row>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}